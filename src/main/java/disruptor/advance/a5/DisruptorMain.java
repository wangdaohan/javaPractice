package disruptor.advance.a5;

/**
 * Disruptor底层源码分析
 *  1.Disruptor为何底层性能如此强大
 *      1.1 高性能之道 - 数据结构 - 内存预加载机制    ->    使用环形结构、数组、内存预加载
 *      1.2 高性能之道 - 内核 - 使用单线程写         ->    使用单线程方式、内存屏障
 *      1.3 高性能之道 - 系统内存优化 - 内存屏障
 *      1.4 高性能之道 - 系统缓存优化 - 消除伪共享    ->    消除伪共享（填充缓存行）
 *      1.5 高性能之道 - 算法优化 - 序号栅栏机制      ->    序号栅栏和序号配合使用来消除锁和CAS
 *      1.6 获取下一个可用序列号
 *
 *
 *    1.1 高性能之道 - 数据结构 - 内存预加载机制    ->    使用环形结构、数组、内存预加载
 *        -- RingBuffer使用数组Object[] entries作为存储元素
 *        -- 内存预加载： RingBuffer初始化时，会将所有event类实例化（初始化）并放在数组中
 *        --
 *
 */
public class DisruptorMain {
    //RingBuffer
}
